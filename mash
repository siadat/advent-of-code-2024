#!/usr/bin/env bash
function throttle() {
	stdbuf -oL nl | while read -r idx line; do
		echo "($idx) Throttling" >> /tmp/debug_chan
		echo "$line"
		sleep $1
	done
}
function look() {
	t cat
}
function t() {
	cmd="$@"
	loc="${BASH_SOURCE[1]}:${BASH_LINENO[0]}"
	"$@" | while read -r line; do
		echo "+ $loc: t $cmd" >> /tmp/debug_chan
		echo -e "\t${indent}$line" >> /tmp/debug_chan
		echo "$line"
	done
}
function start_monitor() {
	rm -f /tmp/debug_chan
	mkfifo /tmp/debug_chan
	tail -f /tmp/debug_chan &
	TAIL_PID=$!
}
function stop_monitor() {
	kill $TAIL_PID
	wait
}
# Experimental
function array() {
	local cmd=""
	local name=""
	local value=""
	local sep=","
	local index=""

	cmd="$1"
	shift
	args=("$@")

	for arg in "${args[@]}"; do
		case "$arg" in
			--name=*) name="${arg#*=}" ;;
			--value=*) value="${arg#*=}" ;;
			--sep=*) sep="${arg#*=}" ;;
			--index=*) index="${arg#*=}" ;;
			--index2=*) index2="${arg#*=}" ;;
		esac
	done

	case "$cmd" in
		"new") echo "$value" | tr "$sep" "\n" > "/dev/shm/array-$name" ;;
		"get")
			if [ -z "$index" ]; then
				cat "/dev/shm/array-$name"
			else
				cat "/dev/shm/array-$name" | sed -n "${index}p"
			fi
			;;
		"del")
			if [ -z "$index" ]; then
				rm "/dev/shm/array-$name"
			else
				cat "/dev/shm/array-$name" > /tmp/tmp
				cat /tmp/tmp | sed -e "${index}d" > "/dev/shm/array-$name"
			fi
			;;
		"swap")
			# TODO
			;;
		*) echo "Unknown command: $cmd" ;;
	esac
}
function std.assert() {
	local actual="$1"
	local expected="$2"
	if [ "$actual" != "$expected" ]; then
		echo "Assertion failed:"
		echo -e "Actual:\n\tt$actual"
		echo -e "Expected:\n\t$expected"
		exit 1
	fi
}
function std.split() {
	# Split into lines
	local sep="${1}"
	if [ -z "$sep" ]; then
		grep -o .
	else
		sed "s/$sep/\n/g"
	fi
}
function std.join() {
	local sep="${1:-,}"
	paste -sd "$sep"
}
function std.replace() {
	local regx="$1"
	local repl="$2"
	sed "s/$regx/$repl/"
}
function std.replace_all() {
	local regx="$1"
	local repl="$2"
	sed "s/$regx/$repl/g"
}
function std.read() {
	local args=()
	local sep=""

	for arg in "$@"; do
		case "$arg" in
			--sep=*) sep="${arg#*=}" ;;
			*) args+=("$arg") ;;
		esac
	done

	if [ -n "$sep" ]; then
		IFS="$sep" read -r "${args[@]}"
	else
		read -r "${args[@]}"
	fi
}
function std.count_lines() {
	wc -l
}
function std.eval_math() {
	# if no argument is passed, start bc
	if [ $# -eq 0 ]; then
		bc
	else
		echo "$1" | bc
	fi
}
function std.filter_line_number() {
	local sed_args=()
	for line in "$@"; do
		sed_args+=("${line}p")
	done

	sed -n "${sed_args[@]}"
}
function std.filter_regex() {
	local regx="$1"
	grep -P "$regx" || true
}
function std.filter_literal() {
	local regx="$1"
	grep --fixed-strings "$regx" || true
}
function std.find() {
	local regx="$1"
	local path="$2"
	grep -P "$regx" -R "$path" || true
}
function std.find_whole() {
	local regx="$1"
	local path="$2"
	grep -w -P "$regx" -R "$path" || true
}
function std.any() {
	# exit immediately with 0 if anything in stdin
	grep -q .
}
function std.sort_numeric() {
	sort -n
}
function std.reverse() {
	tac
}
function std.create() {
	touch "$@"
}
function std.debug.log() {
	echo "$@" >> /dev/stderr
}
function std.both() {
	# Send stderr to stdout
	"$@" 2>&1
}
function std.redirect() {
	which="$1"
	where="$2"
	shift 2
	case "$which" in
		stdout) "$@" > "$where" ;;
		stderr) "$@" 2> "$where" ;;
		*) echo "Unknown redirection: $which" ;;
	esac
}
function std.ignore_stderr() {
	# Send stderr to /dev/null
	std.redirect 2 /dev/nullk "$@"
}
function std.range() {
	beg="${1:-1}"
	end="${2:-}"
	if [ -z "$end" ]; then
		yes x | nl -v $beg | col1
	else
		seq "$beg" "$end"
	fi
}

# Error handling
{
	function error_handler() {
	    echo "Error in file '${BASH_SOURCE[1]}' at line ${BASH_LINENO[0]}: '${BASH_COMMAND}'"
	}
	set -euo pipefail
	trap error_handler ERR
}

function interpret() {
	local expr_str=""
	local verbose=false

	while getopts "c:v" opt; do
	    case $opt in
		v) verbose=true ;;
		c) expr_str="$OPTARG" ;;
		*) echo "Invalid option"; exit 1 ;;
	    esac
	done

	# Display remaining arguments
	shift $((OPTIND - 1))
	# std.debug.log "Remaining arguments: $@"

	if [ -n "$expr_str" ]; then
		eval "$expr_str"
		shift
	else
		source "$1"
		shift
	fi

	# Run function:
	if [ $# -eq 0 ]; then
		return
	fi

	local fn_name="$1"
	shift
	if $verbose; then set -x; fi
	"$fn_name" "$@"
	if $verbose; then { set +x; } 2> /dev/null; fi
}

function std.makefile() {
	for file in "$@"; do
		if [ -e "$file" ]; then
			std.debug.log "File already exists: $file"
		else
			std.debug.log "File does not exists, will run function: $file"
			# We expect a function with the same name as the file
			"$file"
		fi
	done
}

function std.parse_args() {
	std.debug.log "TODO: implement std.parse_args"
}

function std.quote() {
	local str="$1"
	declare -p str | cut -d'=' -f2-
}
std.assert "$(std.quote 'a b "c d" e')" '"a b \"c d\" e"'
std.assert "$(std.quote "a b 'c d' e")" '"a b '"'"'c d'"'"' e"'

function run_subcommand() {
	local command="$1"
	shift

	for registered_command in "${mash_user_commands[@]}"; do
		if [ "$command" == "$registered_command" ]; then
			"$command" "$@"
			exit
		fi
	done
}


start_monitor
interpret "$@"
run_subcommand "$@"
stop_monitor
