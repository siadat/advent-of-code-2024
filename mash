#!/usr/bin/env bash
function throttle() {
	stdbuf -oL nl | while read -r idx line; do
		echo "($idx) Throttling" >> /tmp/debug_chan
		echo "$line"
		sleep $1
	done
}
function look() {
	t cat
}
function t() {
	cmd="$@"
	loc="${BASH_SOURCE[1]}:${BASH_LINENO[0]}"
	"$@" | while read -r line; do
		echo "+ $loc: t $cmd" >> /tmp/debug_chan
		echo -e "\t${indent}$line" >> /tmp/debug_chan
		echo "$line"
	done
}
function start_monitor() {
	rm -f /tmp/debug_chan
	mkfifo /tmp/debug_chan
	tail -f /tmp/debug_chan &
	TAIL_PID=$!
}
function stop_monitor() {
	kill $TAIL_PID
	wait
}
function array() {
	local cmd=""
	local name=""
	local value=""
	local sep=","
	local index=""

	cmd="$1"
	shift
	args=("$@")

	for arg in "${args[@]}"; do
		case "$arg" in
			--name=*) name="${arg#*=}" ;;
			--value=*) value="${arg#*=}" ;;
			--sep=*) sep="${arg#*=}" ;;
			--index=*) index="${arg#*=}" ;;
			--index2=*) index2="${arg#*=}" ;;
		esac
	done

	case "$cmd" in
		"new") echo "$value" | tr "$sep" "\n" > "/dev/shm/array-$name" ;;
		"get")
			if [ -z "$index" ]; then
				cat "/dev/shm/array-$name"
			else
				cat "/dev/shm/array-$name" | sed -n "${index}p"
			fi
			;;
		"del")
			if [ -z "$index" ]; then
				rm "/dev/shm/array-$name"
			else
				cat "/dev/shm/array-$name" > /tmp/tmp
				cat /tmp/tmp | sed -e "${index}d" > "/dev/shm/array-$name"
			fi
			;;
		"swap")
			# TODO
			;;
		*) echo "Unknown command: $cmd" ;;
	esac
}
start_monitor
source "$1"
stop_monitor
