#!/usr/bin/env bash
function throttle() {
	stdbuf -oL nl | while read -r idx line; do
		echo "($idx) Throttling" >> /tmp/debug_chan
		echo "$line"
		sleep $1
	done
}
function look() {
	t cat
}
function t() {
	cmd="$@"
	loc="${BASH_SOURCE[1]}:${BASH_LINENO[0]}"
	"$@" | while read -r line; do
		echo "+ $loc: t $cmd" >> /tmp/debug_chan
		echo -e "\t${indent}$line" >> /tmp/debug_chan
		echo "$line"
	done
}
function start_monitor() {
	rm -f /tmp/debug_chan
	mkfifo /tmp/debug_chan
	tail -f /tmp/debug_chan &
	TAIL_PID=$!
}
function stop_monitor() {
	kill $TAIL_PID
	wait
}
# Experimental
function array() {
	local cmd=""
	local name=""
	local value=""
	local sep=","
	local index=""

	cmd="$1"
	shift
	args=("$@")

	for arg in "${args[@]}"; do
		case "$arg" in
			--name=*) name="${arg#*=}" ;;
			--value=*) value="${arg#*=}" ;;
			--sep=*) sep="${arg#*=}" ;;
			--index=*) index="${arg#*=}" ;;
			--index2=*) index2="${arg#*=}" ;;
		esac
	done

	case "$cmd" in
		"new") echo "$value" | tr "$sep" "\n" > "/dev/shm/array-$name" ;;
		"get")
			if [ -z "$index" ]; then
				cat "/dev/shm/array-$name"
			else
				cat "/dev/shm/array-$name" | sed -n "${index}p"
			fi
			;;
		"del")
			if [ -z "$index" ]; then
				rm "/dev/shm/array-$name"
			else
				cat "/dev/shm/array-$name" > /tmp/tmp
				cat /tmp/tmp | sed -e "${index}d" > "/dev/shm/array-$name"
			fi
			;;
		"swap")
			# TODO
			;;
		*) echo "Unknown command: $cmd" ;;
	esac
}
function std.split() {
	local sep="${1:-,}"
	sed "s/$sep/\n/g"
}
function std.join() {
	local sep="${1:-,}"
	paste -sd "$sep"
}
function std.replace() {
	local regx="$1"
	local repl="$2"
	sed "s/$regx/$repl/"
}
function std.replace_all() {
	local regx="$1"
	local repl="$2"
	sed "s/$regx/$repl/g"
}
function std.read() {
	local args=()
	local sep=""

	for arg in "$@"; do
		case "$arg" in
			--sep=*) sep="${arg#*=}" ;;
			*) args+=("$arg") ;;
		esac
	done

	if [ -n "$sep" ]; then
		IFS="$sep" read -r "${args[@]}"
	else
		read -r "${args[@]}"
	fi
}
function std.count_lines() {
	wc -l
}
function std.eval_math() {
	# if no argument is passed, start bc
	if [ $# -eq 0 ]; then
		bc
	else
		echo "$1" | bc
	fi
}
function std.filter_line_number() {
	local sed_args=()
	for line in "$@"; do
		sed_args+=("${line}p")
	done

	sed -n "${sed_args[@]}"
}
function std.filter_regex() {
	local regx="$1"
	grep -P "$regx" || true
}
function std.filter_literal() {
	local regx="$1"
	grep --fixed-strings "$regx" || true
}
function std.find() {
	local regx="$1"
	local path="$2"
	grep -P "$regx" -R "$path" || true
}
function std.find_whole() {
	local regx="$1"
	local path="$2"
	grep -w -P "$regx" -R "$path" || true
}
function std.any() {
	# exit immediately with 0 if anything in stdin
	grep -q .
}
function std.sort_numeric() {
	sort -n
}
function std.reverse() {
	tac
}
function std.create() {
	touch "$@"
}
function std.debug.log() {
	echo "$@" >> /dev/stderr
}
function blah() {
	echo "blah"
}

# Error handling
{
	function error_handler() {
	    echo "Error in file '${BASH_SOURCE[1]}' at line ${BASH_LINENO[0]}: '${BASH_COMMAND}'"
	}
	set -euo pipefail
	trap error_handler ERR
}

start_monitor
source "$1"
stop_monitor
